{"ast":null,"code":"import { ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS } from \"../types\";\nimport { bake_cookie, read_cookie } from \"sfcookies\";\n\nconst reminders = (state = [], action) => {\n  let reminders = null;\n  state = read_cookie(\"reminders\");\n\n  if (action.type === ADD_REMINDER) {\n    reminders = [...state, {\n      text: action.text,\n      date: action.date,\n      id: Math.random()\n    }];\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else if (action.type === REMOVE_REMINDER) {\n    reminders = state.filter(reminder => reminder.id !== action.id);\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else if (action.type === CLEAR_REMINDERS) {\n    reminders = [];\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else {\n    return state;\n  }\n};\n\nexport default reminders;","map":{"version":3,"sources":["D:\\ITI\\1React - Practise\\reminderApp\\reminderApp-master\\src\\reducers\\index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","bake_cookie","read_cookie","reminders","state","action","type","text","date","id","Math","random","console","log","filter","reminder"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,eAAvB,EAAwCC,eAAxC,QAA+D,UAA/D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,WAAzC;;AACA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACxC,MAAIF,SAAS,GAAG,IAAhB;AAEAC,EAAAA,KAAK,GAAGF,WAAW,CAAC,WAAD,CAAnB;;AAEA,MAAIG,MAAM,CAACC,IAAP,KAAgBR,YAApB,EAAkC;AAChCK,IAAAA,SAAS,GAAG,CACV,GAAGC,KADO,EAEV;AAAEG,MAAAA,IAAI,EAAEF,MAAM,CAACE,IAAf;AAAqBC,MAAAA,IAAI,EAAEH,MAAM,CAACG,IAAlC;AAAwCC,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL;AAA5C,KAFU,CAAZ;AAIAV,IAAAA,WAAW,CAAC,WAAD,EAAcE,SAAd,CAAX;AAEAS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,SAA7B;AACA,WAAOA,SAAP;AACD,GATD,MASO,IAAIE,MAAM,CAACC,IAAP,KAAgBP,eAApB,EAAqC;AAC1CI,IAAAA,SAAS,GAAGC,KAAK,CAACU,MAAN,CAAcC,QAAD,IAAcA,QAAQ,CAACN,EAAT,KAAgBJ,MAAM,CAACI,EAAlD,CAAZ;AACAR,IAAAA,WAAW,CAAC,WAAD,EAAcE,SAAd,CAAX;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,SAA7B;AACA,WAAOA,SAAP;AACD,GALM,MAKA,IAAIE,MAAM,CAACC,IAAP,KAAgBN,eAApB,EAAqC;AAC1CG,IAAAA,SAAS,GAAG,EAAZ;AACAF,IAAAA,WAAW,CAAC,WAAD,EAAcE,SAAd,CAAX;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,SAA7B;AACA,WAAOA,SAAP;AACD,GALM,MAKA;AACL,WAAOC,KAAP;AACD;AACF,CA3BD;;AA6BA,eAAeD,SAAf","sourcesContent":["import { ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDERS } from \"../types\";\nimport { bake_cookie, read_cookie } from \"sfcookies\";\nconst reminders = (state = [], action) => {\n  let reminders = null;\n\n  state = read_cookie(\"reminders\");\n\n  if (action.type === ADD_REMINDER) {\n    reminders = [\n      ...state,\n      { text: action.text, date: action.date, id: Math.random() },\n    ];\n    bake_cookie(\"reminders\", reminders);\n\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else if (action.type === REMOVE_REMINDER) {\n    reminders = state.filter((reminder) => reminder.id !== action.id);\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else if (action.type === CLEAR_REMINDERS) {\n    reminders = [];\n    bake_cookie(\"reminders\", reminders);\n    console.log(\"from reducer \", reminders);\n    return reminders;\n  } else {\n    return state;\n  }\n};\n\nexport default reminders;\n"]},"metadata":{},"sourceType":"module"}